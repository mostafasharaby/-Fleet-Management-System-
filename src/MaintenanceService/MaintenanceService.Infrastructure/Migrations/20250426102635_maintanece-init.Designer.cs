// <auto-generated />
using System;
using MaintenanceService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaintenanceService.Infrastructure.Migrations
{
    [DbContext(typeof(MaintenanceDbContext))]
    [Migration("20250426102635_maintanece-init")]
    partial class maintaneceinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaintenanceService.Domain.Models.MaintenanceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("OdometerReading")
                        .HasColumnType("float");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceEvents");
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.MaintenanceTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedTechnicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceTasks");
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.PartReplacement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<Guid?>("MaintenanceEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceEventId");

                    b.ToTable("PartReplacements");
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.RequiredPart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("MaintenanceTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTaskId");

                    b.ToTable("RequiredParts");
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.PartReplacement", b =>
                {
                    b.HasOne("MaintenanceService.Domain.Models.MaintenanceEvent", null)
                        .WithMany("PartsReplaced")
                        .HasForeignKey("MaintenanceEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.RequiredPart", b =>
                {
                    b.HasOne("MaintenanceService.Domain.Models.MaintenanceTask", null)
                        .WithMany("RequiredParts")
                        .HasForeignKey("MaintenanceTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.MaintenanceEvent", b =>
                {
                    b.Navigation("PartsReplaced");
                });

            modelBuilder.Entity("MaintenanceService.Domain.Models.MaintenanceTask", b =>
                {
                    b.Navigation("RequiredParts");
                });
#pragma warning restore 612, 618
        }
    }
}
